# Test various ways to build to make sure everything (setuptools, cmake, vcpkg, ...) is
# correctly integrated
name: build simulations
on:
  push:
    branches:
      # Usually we want to be 100% sure build is not broken when we create release/x.y.z
      # branch. Other times it just isn't worth the wait.
      - "release/**"

jobs:

  # Build sdist and wheel through "python -m build" without C++ extension
  sdist_and_wheel:
    name: sdist and wheel
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]
    env:
      SOKOENGINEPYEXT_SKIP: true

    steps:
      - uses: actions/checkout@v3

      - name: set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: src/sokoenginepy/game/base_tessellation.py

      - name: ensure pip and wheel are at latest version
        run: pip install --upgrade pip wheel

      - name: install build utilities
        run: pip install twine check-manifest build

      - name: check manifest
        run: check-manifest

      - name: build sdist and wheel
        run: python -m build

      - name: check sdist
        run: twine check dist/*.tar.gz

      - name: check wheel
        run: twine check dist/*.whl

      - name: upload sdist and wheel
        uses: actions/upload-artifact@v3
        with:
          name: sdist-wheel-${{ matrix.python-version }}
          path: dist/
          retention-days: 5


  # Build sdist and wheel through "python -m build" with C++ extension
  sdist_and_wheel_with_cpp:
    name: sdist and wheel with C++ extension
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: setup vcpkg
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: "${{ github.workspace }}/vcpkg"
          vcpkgGitCommitId: "4826ede84084395b0f87476e48ff6d4070eba0e4"
          appendedCacheKey: "python_m_build_${{ matrix.python-version }}"

      - name: set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: src/sokoenginepy/game/board_cell.py

      - name: ensure pip and wheel are at latest version
        run: pip install --upgrade pip wheel

      - name: install build utilities
        run: pip install twine check-manifest build

      - name: check manifest
        run: check-manifest

      - name: build sdist and wheel
        env:
          CMAKE_TOOLCHAIN_FILE: "${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
        run: python -m build

      - name: check sdist
        run: twine check dist/*.tar.gz

      - name: check wheel
        run: twine check dist/*.whl

      - name: upload sdist and wheel
        uses: actions/upload-artifact@v3
        with:
          name: sdist-wheel-cpp-${{ matrix.python-version }}
          path: dist/
          retention-days: 5


  # Build directly through cmake, without setuptools
  # We still need Python environment to build C++ Python module
  cpp_build:
    name: C++ build directly with cmake
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: setup vcpkg
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: "${{ github.workspace }}/vcpkg"
          vcpkgGitCommitId: "4826ede84084395b0f87476e48ff6d4070eba0e4"
          appendedCacheKey: "cmake_release_cpp_build"

      - name: set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: 'pip'
          cache-dependency-path: src/sokoenginepy/game/board_graph.py

      - name: ensure pip and wheel are at latest version
        run: pip install --upgrade pip wheel

      - name: install pybind11
        run: pip install pybind11

      - name: install build utilities
        run: sudo apt install -y cmake ninja-build

      - name: configure
        env:
          CMAKE_TOOLCHAIN_FILE: "${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
        run: cmake -DCMAKE_INSTALL_PREFIX=build/installed --preset release

      - name: make
        working-directory: ./build/release
        run: ninja sokoengine sokoenginepyext dist

      - name: make install
        working-directory: ./build/release
        run: ninja install

      - name: upload staged install
        uses: actions/upload-artifact@v3
        with:
          name: build-cpp-${{ matrix.python-version }}
          path: build/installed/
          retention-days: 5

      - name: upload Python .so
        uses: actions/upload-artifact@v3
        with:
          name: build-cpp-${{ matrix.python-version }}
          path: build/release/src/sokoenginepyext/sokoenginepyext.*.so
          retention-days: 5

      - name: upload source tarball
        uses: actions/upload-artifact@v3
        with:
          name: build-cpp-${{ matrix.python-version }}
          path: build/release/libsokoengine-*.tar.gz
          retention-days: 5

  # Replicate build of Sphinx docs on ReadTheDocs so we get early fail if we broke it
  sphinx_docs:
    name: Sphinx documentation
    runs-on: ubuntu-latest
    env:
      SOKOENGINEPYEXT_SKIP: true

    steps:
      - uses: actions/checkout@v3

      - name: set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: 'pip'
          cache-dependency-path: src/sokoenginepy/game/board_manager.py

      - name: ensure pip and wheel are at latest version
        run: pip install --upgrade pip wheel

      - name: install docs environment
        run: pip install .[docs]

      - name: build Sphinx documentation
        run: sphinx-build -E -b html docs dist/docs
