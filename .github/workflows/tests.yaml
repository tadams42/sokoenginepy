name: tests

on:
  push:
    branches-ignore:
      # Once thing had been pushed to master branch, tests have already had to run and
      # pass so no need to run them again
      - "master"
      # No tests are needed or possible on this branch
      - "gh-pages"


jobs:

  run_tests:
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]
        os: [ubuntu-latest, windows-latest]
        cpp-on: ['🟢', '🔴']
    runs-on: ${{ matrix.os }}
    name: "${{ matrix.os }} 🔹 🐍 ${{ matrix.python-version }} 🔹 C++ ${{ matrix.cpp-on }}"

    steps:
      - uses: actions/checkout@v3
      - name: "📦 setup vcpkg"
        if: ${{ matrix.cpp-on == '🟢' }}
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: "${{ github.workspace }}/vcpkg"
          vcpkgGitCommitId: "4826ede84084395b0f87476e48ff6d4070eba0e4"
          appendedCacheKey: "tests_${{ matrix.python-version }}${{ matrix.os }}"
      - name: "📦 set up 🐍 ${{ matrix.python-version }}"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: pyproject.toml
      - name: "📦 ensure latest pip"
        run: python -m pip install --upgrade pip
      - name: "📦 install wheel"
        run: pip install wheel

      #---------------------------------------------------------------------------------
      # install ourselves
      # TODO: pip install fails on Windows, vcpkg is not able to find globally installed cmake
      #---------------------------------------------------------------------------------
      - name: "🪟 🔹 📦 install bundled cmake 🔹 C++ 🟢"
        if: ${{ matrix.cpp-on == '🟢' && matrix.os == 'windows-latest'}}
        run: pip install cmake
      - name: "install sokoenginepy 🔹 C++ 🔴"
        if: ${{ matrix.cpp-on == '🔴' }}
        env:
          SOKOENGINEPYEXT_SKIP: true
        run: pip install .[tests]
      - name: "install sokoenginepy 🔹 C++ 🟢"
        if: ${{ matrix.cpp-on == '🟢' }}
        env:
          CMAKE_TOOLCHAIN_FILE: "${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
        run: pip -v install .[tests]

      #---------------------------------------------------------------------------------
      # run tests
      # TODO: tests are currently broken on Windows
      #---------------------------------------------------------------------------------
      - name: "run tests 🔹 C++ 🔴"
        if: ${{ matrix.cpp-on == '🔴' && matrix.os != 'windows-latest' }}
        env:
          SOKOENGINEPY_EXPECT_CPP: false
        run: pytest
      - name: "run tests 🔹 C++ 🟢"
        if: ${{ matrix.cpp-on == '🟢' && matrix.os != 'windows-latest' }}
        env:
          SOKOENGINEPY_EXPECT_CPP: true
        run: pytest

      #---------------------------------------------------------------------------------
      # Tests coverage
      #---------------------------------------------------------------------------------
      # We need coverage data only from single tests run.
      - name: "🐧 🔹 run tests with coverage 🔹 🐍 3.9 🔹 C++ 🔴 "
        if: ${{ matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest' && matrix.cpp-on == '🔴'}}
        run: coverage run -m pytest
      - name: "🐧 🔹 generate coverage xml 🔹 🐍 3.9 🔹 C++ 🔴 "
        if: ${{ matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest' && matrix.cpp-on == '🔴'}}
        run: coverage xml
      - name: "🐧 🔹 generate coverage report 🔹 🐍 3.9 🔹 C++ 🔴 "
        if: ${{ matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest' && matrix.cpp-on == '🔴'}}
        run: coverage report
      - name: "🐧 🔹 upload coverage to codecov.io 🔹 🐍 3.9 🔹 C++ 🔴 "
        if: ${{ matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest' && matrix.cpp-on == '🔴'}}
        uses: codecov/codecov-action@v3
      - name: "🐧 🔹 upload coverage to Codacy 🔹 🐍 3.9 🔹 C++ 🔴 "
        if: ${{ matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest' && matrix.cpp-on == '🔴'}}
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.codacy_api_token }}
          coverage-reports: coverage.xml
