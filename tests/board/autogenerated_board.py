# Generated by generate_tests.py using data from fixtures/test_cases
import pytest

from sokoenginepy import (CellOrientation, Direction, HexobanBoard,
                          OctobanBoard, SokobanBoard, Tessellation,
                          TriobanBoard)
from sokoenginepy.utilities import index_1d, is_on_board_1d


def triangle_points_down(position, board_width, board_height):
    return Tessellation.TRIOBAN.value.cell_orientation(
        position, board_width, board_height
    ) == CellOrientation.TRIANGLE_DOWN


def is_octagon(position, board_width, board_height):
    return Tessellation.OCTOBAN.value.cell_orientation(
        position, board_width, board_height
    ) == CellOrientation.OCTAGON


class SokobanBoardAutogeneratedSpecMixin:
    class Describe_neighbor_position:
        def test_autogenerated_topLeft(self):
            width = 10
            height = 10
            row = 0
            column = 0
            index = index_1d(column, row, width)
            b = SokobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert b.neighbor(index, Direction.DOWN) == index_1d(0,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_topRight(self):
            width = 10
            height = 10
            row = 0
            column = 9
            index = index_1d(column, row, width)
            b = SokobanBoard(width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(8,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert b.neighbor(index, Direction.DOWN) == index_1d(9,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomLeft(self):
            width = 10
            height = 10
            row = 9
            column = 0
            index = index_1d(column, row, width)
            b = SokobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,9, width)
            assert b.neighbor(index, Direction.UP) == index_1d(0,8, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomRight(self):
            width = 10
            height = 10
            row = 9
            column = 9
            index = index_1d(column, row, width)
            b = SokobanBoard(width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(8,9, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert b.neighbor(index, Direction.UP) == index_1d(9,8, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleTop(self):
            width = 10
            height = 10
            row = 0
            column = 5
            index = index_1d(column, row, width)
            b = SokobanBoard(width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(4,0, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(6,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert b.neighbor(index, Direction.DOWN) == index_1d(5,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleBottom(self):
            width = 10
            height = 10
            row = 9
            column = 5
            index = index_1d(column, row, width)
            b = SokobanBoard(width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(4,9, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(6,9, width)
            assert b.neighbor(index, Direction.UP) == index_1d(5,8, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleLeft(self):
            width = 10
            height = 10
            row = 5
            column = 0
            index = index_1d(column, row, width)
            b = SokobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,5, width)
            assert b.neighbor(index, Direction.UP) == index_1d(0,4, width)
            assert b.neighbor(index, Direction.DOWN) == index_1d(0,6, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleRight(self):
            width = 10
            height = 10
            row = 5
            column = 9
            index = index_1d(column, row, width)
            b = SokobanBoard(width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(8,5, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert b.neighbor(index, Direction.UP) == index_1d(9,4, width)
            assert b.neighbor(index, Direction.DOWN) == index_1d(9,6, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_board_1x1(self):
            width = 1
            height = 1
            row = 0
            column = 0
            index = index_1d(column, row, width)
            b = SokobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_board_2x1_left(self):
            width = 2
            height = 1
            row = 0
            column = 0
            index = index_1d(column, row, width)
            b = SokobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_boarD_2x1_right(self):
            width = 2
            height = 1
            row = 0
            column = 1
            index = index_1d(column, row, width)
            b = SokobanBoard(width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(0,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_1x2_top(self):
            width = 1
            height = 2
            row = 0
            column = 0
            index = index_1d(column, row, width)
            b = SokobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert b.neighbor(index, Direction.DOWN) == index_1d(0,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_1x2_bottom(self):
            width = 1
            height = 2
            row = 1
            column = 0
            index = index_1d(column, row, width)
            b = SokobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert b.neighbor(index, Direction.UP) == index_1d(0,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)


class TriobanBoardAutogeneratedSpecMixin:
    class Describe_neighbor_position:
        def test_autogenerated_topLeft(self):
            width = 5
            height = 5
            row = 0
            column = 0
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert triangle_points_down(index, width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(1,0, width)

        def test_autogenerated_topRight_columnOdd(self):
            width = 4
            height = 4
            row = 0
            column = 3
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert column % 2 == 1 and not triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(2,0, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(3,1, width)

        def test_autogenerated_topRight_columnEven(self):
            width = 5
            height = 5
            row = 0
            column = 4
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert column % 2 == 0 and triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomLeft_rowOdd(self):
            width = 4
            height = 4
            row = 3
            column = 0
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert row % 2 == 1 and not triangle_points_down(index, width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(1,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomLeft_rowEven(self):
            width = 5
            height = 5
            row = 4
            column = 0
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert row % 2 == 0 and triangle_points_down(index, width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(0,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(0,3, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(1,4, width)

        def test_autogenerated_bottomRight_rowEven_columnEven(self):
            width = 5
            height = 5
            row = 4
            column = 4
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 0 and triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(4,3, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,4, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(4,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomRight_rowEven_columnOdd(self):
            width = 4
            height = 5
            row = 4
            column = 3
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 1 and not triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(2,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomRight_rowOdd_columnEven(self):
            width = 5
            height = 4
            row = 3
            column = 4
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 0 and not triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomRight_rowOdd_columnOdd(self):
            width = 4
            height = 4
            row = 3
            column = 3
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 1 and triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,2, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(2,3, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(3,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleTop_columnOdd(self):
            width = 10
            height = 10
            row = 0
            column = 3
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert column % 2 == 1 and not triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,0, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(4,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(2,0, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,1, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(4,0, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(3,1, width)

        def test_autogenerated_midleTop_columnEven(self):
            width = 10
            height = 10
            row = 0
            column = 4
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert column % 2 == 0 and triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,0, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(5,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(5,0, width)

        def test_autogenerated_midleBottom_columnOdd_rowEven(self):
            width = 10
            height = 5
            row = 4
            column = 3
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert column % 2 == 1 and row % 2 == 0 and not triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,4, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(4,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(2,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(4,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_middleBottom_columnEven_rowEven(self):
            width = 10
            height = 5
            row = 4
            column = 4
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert column % 2 == 0 and row % 2 == 0 and triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,4, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(5,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(4,3, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,4, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(4,3, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(5,4, width)

        def test_autogenerated_midleBottom_columnOdd_rowOdd(self):
            width = 10
            height = 4
            row = 3
            column = 3
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert column % 2 == 1 and row % 2 == 1 and triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,3, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(4,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,2, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(2,3, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(3,2, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(4,3, width)

        def test_autogenerated_middleBottom_columnEven_rowOdd(self):
            width = 10
            height = 4
            row = 3
            column = 4
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert column % 2 == 0 and row % 2 == 1 and not triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,3, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(5,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(5,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleLeft_rowOdd(self):
            width = 10
            height = 10
            row = 3
            column = 0
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert row % 2 == 1 and not triangle_points_down(index, width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(0,4, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(1,3, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(0,4, width)

        def test_autogenerated_midleLeft_rowEven(self):
            width = 10
            height = 10
            row = 2
            column = 0
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert row % 2 == 0 and triangle_points_down(index, width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(0,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(0,1, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(1,2, width)

        def test_autogenerated_midleRight_rowOdd_columnOdd(self):
            width = 4
            height = 10
            row = 3
            column = 3
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 1 and triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,2, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(2,3, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(3,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleRight_rowEven_columnOdd(self):
            width = 4
            height = 10
            row = 2
            column = 3
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 1 and not triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(2,2, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(3,3, width)

        def test_autogenerated_midleRight_rowOdd_columnEven(self):
            width = 5
            height = 10
            row = 3
            column = 4
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 0 and not triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,3, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(4,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(4,4, width)

        def test_autogenerated_midleRight_rowEven_columnEven(self):
            width = 5
            height = 10
            row = 2
            column = 4
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 0 and triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(4,1, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,2, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(4,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midle_rowOdd_columnOdd(self):
            width = 10
            height = 10
            row = 3
            column = 3
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 1 and triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,3, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(4,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,2, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(2,3, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(3,2, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(4,3, width)

        def test_autogenerated_midle_rowOdd_columnEven(self):
            width = 10
            height = 10
            row = 3
            column = 2
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 0 and not triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(1,3, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(1,3, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(2,4, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(3,3, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(2,4, width)

        def test_autogenerated_midle_rowEven_columnOdd(self):
            width = 10
            height = 10
            row = 2
            column = 3
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 1 and not triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,2, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(4,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(2,2, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,3, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(4,2, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(3,3, width)

        def test_autogenerated_midle_rowEven_columnEven(self):
            width = 10
            height = 10
            row = 2
            column = 2
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 0 and triangle_points_down(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(1,2, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(3,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(2,1, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(1,2, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(2,1, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(3,2, width)

        def test_autogenerated_board_1x1(self):
            width = 1
            height = 1
            row = 0
            column = 0
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_board_2x1_left(self):
            width = 2
            height = 1
            row = 0
            column = 0
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(1,0, width)

        def test_autogenerated_board_2x1_right(self):
            width = 2
            height = 1
            row = 0
            column = 1
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(0,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(0,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_board_3x1_right(self):
            width = 3
            height = 1
            row = 0
            column = 2
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(1,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(1,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_1x2_top(self):
            width = 1
            height = 2
            row = 0
            column = 0
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_1x2_bottom(self):
            width = 1
            height = 2
            row = 1
            column = 0
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_1x3_bottom(self):
            width = 1
            height = 3
            row = 2
            column = 0
            index = index_1d(column, row, width)
            b = TriobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(0,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(0,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)


class HexobanBoardAutogeneratedSpecMixin:
    class Describe_neighbor_position:
        def test_autogenerated_topLeft(self):
            width = 5
            height = 5
            row = 0
            column = 0
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(0,1, width)

        def test_autogenerated_topRight_columnOdd(self):
            width = 4
            height = 4
            row = 0
            column = 3
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert column % 2 == 1

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(2,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(3,1, width)

        def test_autogenerated_topRight_columnEven(self):
            width = 5
            height = 5
            row = 0
            column = 4
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert column % 2 == 0

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(4,1, width)

        def test_autogenerated_bottomLeft_rowOdd(self):
            width = 4
            height = 4
            row = 3
            column = 0
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert row % 2 == 1

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(0,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(1,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomLeft_rowEven(self):
            width = 5
            height = 5
            row = 4
            column = 0
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert row % 2 == 0

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(0,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomRight_rowEven_columnEven(self):
            width = 5
            height = 5
            row = 4
            column = 4
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 0

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(4,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomRight_rowEven_columnOdd(self):
            width = 4
            height = 5
            row = 4
            column = 3
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 1

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(2,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomRight_rowOdd_columnEven(self):
            width = 5
            height = 4
            row = 3
            column = 4
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 0

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(4,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomRight_rowOdd_columnOdd(self):
            width = 4
            height = 4
            row = 3
            column = 3
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 1

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleTop_columnOdd(self):
            width = 10
            height = 10
            row = 0
            column = 3
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert column % 2 == 1

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,0, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(4,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(2,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(3,1, width)

        def test_autogenerated_midleTop_columnEven(self):
            width = 10
            height = 10
            row = 0
            column = 4
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert column % 2 == 0

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,0, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(5,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(4,1, width)

        def test_autogenerated_midleBottom_columnOdd_rowEven(self):
            width = 10
            height = 5
            row = 4
            column = 3
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert column % 2 == 1 and row % 2 == 0

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,4, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(4,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(2,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_middleBottom_columnEven_rowEven(self):
            width = 10
            height = 5
            row = 4
            column = 4
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert column % 2 == 0 and row % 2 == 0

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,4, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(5,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(4,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleBottom_columnOdd_rowOdd(self):
            width = 10
            height = 4
            row = 3
            column = 3
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert column % 2 == 1 and row % 2 == 1

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,3, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(4,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(4,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_middleBottom_columnEven_rowOdd(self):
            width = 10
            height = 4
            row = 3
            column = 4
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert column % 2 == 0 and row % 2 == 1

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,3, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(5,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(4,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(5,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleLeft_rowOdd(self):
            width = 10
            height = 10
            row = 3
            column = 0
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert row % 2 == 1

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(0,2, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(0,4, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(1,2, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(1,4, width)

        def test_autogenerated_midleLeft_rowEven(self):
            width = 10
            height = 10
            row = 2
            column = 0
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert row % 2 == 0

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(0,1, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(0,3, width)

        def test_autogenerated_midleRight_rowOdd_columnOdd(self):
            width = 4
            height = 10
            row = 3
            column = 3
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 1

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,2, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleRight_rowEven_columnOdd(self):
            width = 4
            height = 10
            row = 2
            column = 3
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 1

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(2,1, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(2,3, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(3,1, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(3,3, width)

        def test_autogenerated_midleRight_rowOdd_columnEven(self):
            width = 5
            height = 10
            row = 3
            column = 4
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 0

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(4,2, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(4,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleRight_rowEven_columnEven(self):
            width = 5
            height = 10
            row = 2
            column = 4
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 0

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,1, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,3, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(4,1, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(4,3, width)

        def test_autogenerated_midle_rowOdd_columnOdd(self):
            width = 10
            height = 10
            row = 3
            column = 3
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 1

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,3, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(4,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,2, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,4, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(4,2, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(4,4, width)

        def test_autogenerated_midle_rowOdd_columnEven(self):
            width = 10
            height = 10
            row = 3
            column = 2
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 0

            assert b.neighbor(index, Direction.LEFT) == index_1d(1,3, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(2,2, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(2,4, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(3,2, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(3,4, width)

        def test_autogenerated_midle_rowEven_columnOdd(self):
            width = 10
            height = 10
            row = 2
            column = 3
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 1

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,2, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(4,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(2,1, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(2,3, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(3,1, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(3,3, width)

        def test_autogenerated_midle_rowEven_columnEven(self):
            width = 10
            height = 10
            row = 2
            column = 2
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 0

            assert b.neighbor(index, Direction.LEFT) == index_1d(1,2, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(3,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(1,1, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(1,3, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(2,1, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(2,3, width)

        def test_autogenerated_board_1x1(self):
            width = 1
            height = 1
            row = 0
            column = 0
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_board_2x1_left(self):
            width = 2
            height = 1
            row = 0
            column = 0
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_board_2x1_right(self):
            width = 2
            height = 1
            row = 0
            column = 1
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(0,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_board_3x1_right(self):
            width = 3
            height = 1
            row = 0
            column = 2
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(1,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_1x2_top(self):
            width = 1
            height = 2
            row = 0
            column = 0
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(0,1, width)

        def test_autogenerated_1x2_bottom(self):
            width = 1
            height = 2
            row = 1
            column = 0
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(0,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_1x3_bottom(self):
            width = 1
            height = 3
            row = 2
            column = 0
            index = index_1d(column, row, width)
            b = HexobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(0,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)


class OctobanBoardAutogeneratedSpecMixin:
    class Describe_neighbor_position:
        def test_autogenerated_topLeft(self):
            width = 5
            height = 5
            row = 0
            column = 0
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert is_octagon(index, width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert b.neighbor(index, Direction.DOWN) == index_1d(0,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(1,1, width)

        def test_autogenerated_topRight_columnOdd(self):
            width = 4
            height = 4
            row = 0
            column = 3
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert column % 2 == 1 and not is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert b.neighbor(index, Direction.DOWN) == index_1d(3,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_topRight_columnEven(self):
            width = 5
            height = 5
            row = 0
            column = 4
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert column % 2 == 0 and is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert b.neighbor(index, Direction.DOWN) == index_1d(4,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomLeft_rowOdd(self):
            width = 4
            height = 4
            row = 3
            column = 0
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert row % 2 == 1 and not is_octagon(index, width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,3, width)
            assert b.neighbor(index, Direction.UP) == index_1d(0,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomLeft_rowEven(self):
            width = 5
            height = 5
            row = 4
            column = 0
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert row % 2 == 0 and is_octagon(index, width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,4, width)
            assert b.neighbor(index, Direction.UP) == index_1d(0,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(1,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomRight_rowEven_columnEven(self):
            width = 5
            height = 5
            row = 4
            column = 4
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 0 and is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert b.neighbor(index, Direction.UP) == index_1d(4,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomRight_rowEven_columnOdd(self):
            width = 4
            height = 5
            row = 4
            column = 3
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 1 and not is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert b.neighbor(index, Direction.UP) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomRight_rowOdd_columnEven(self):
            width = 5
            height = 4
            row = 3
            column = 4
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 0 and not is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert b.neighbor(index, Direction.UP) == index_1d(4,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_bottomRight_rowOdd_columnOdd(self):
            width = 4
            height = 4
            row = 3
            column = 3
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 1 and is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert b.neighbor(index, Direction.UP) == index_1d(3,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(2,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleTop_columnOdd(self):
            width = 10
            height = 10
            row = 0
            column = 3
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert column % 2 == 1 and not is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,0, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(4,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert b.neighbor(index, Direction.DOWN) == index_1d(3,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleTop_columnEven(self):
            width = 10
            height = 10
            row = 0
            column = 4
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert column % 2 == 0 and is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,0, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(5,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert b.neighbor(index, Direction.DOWN) == index_1d(4,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(5,1, width)

        def test_autogenerated_midleBottom_columnOdd_rowEven(self):
            width = 10
            height = 5
            row = 4
            column = 3
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert column % 2 == 1 and row % 2 == 0 and not is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,4, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(4,4, width)
            assert b.neighbor(index, Direction.UP) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_middleBottom_columnEven_rowEven(self):
            width = 10
            height = 5
            row = 4
            column = 4
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert column % 2 == 0 and row % 2 == 0 and is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,4, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(5,4, width)
            assert b.neighbor(index, Direction.UP) == index_1d(4,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(5,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleBottom_columnOdd_rowOdd(self):
            width = 10
            height = 4
            row = 3
            column = 3
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert column % 2 == 1 and row % 2 == 1 and is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,3, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(4,3, width)
            assert b.neighbor(index, Direction.UP) == index_1d(3,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(2,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(4,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_middleBottom_columnEven_rowOdd(self):
            width = 10
            height = 4
            row = 3
            column = 4
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert column % 2 == 0 and row % 2 == 1 and not is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,3, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(5,3, width)
            assert b.neighbor(index, Direction.UP) == index_1d(4,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleLeft_rowOdd(self):
            width = 10
            height = 10
            row = 3
            column = 0
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert row % 2 == 1 and not is_octagon(index, width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,3, width)
            assert b.neighbor(index, Direction.UP) == index_1d(0,2, width)
            assert b.neighbor(index, Direction.DOWN) == index_1d(0,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleLeft_rowEven(self):
            width = 10
            height = 10
            row = 2
            column = 0
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert row % 2 == 0 and is_octagon(index, width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,2, width)
            assert b.neighbor(index, Direction.UP) == index_1d(0,1, width)
            assert b.neighbor(index, Direction.DOWN) == index_1d(0,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(1,1, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(1,3, width)

        def test_autogenerated_midleRight_rowOdd_columnOdd(self):
            width = 4
            height = 10
            row = 3
            column = 3
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 1 and is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert b.neighbor(index, Direction.UP) == index_1d(3,2, width)
            assert b.neighbor(index, Direction.DOWN) == index_1d(3,4, width)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(2,2, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(2,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleRight_rowEven_columnOdd(self):
            width = 4
            height = 10
            row = 2
            column = 3
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 1 and not is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert b.neighbor(index, Direction.UP) == index_1d(3,1, width)
            assert b.neighbor(index, Direction.DOWN) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleRight_rowOdd_columnEven(self):
            width = 5
            height = 10
            row = 3
            column = 4
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 0 and not is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert b.neighbor(index, Direction.UP) == index_1d(4,2, width)
            assert b.neighbor(index, Direction.DOWN) == index_1d(4,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midleRight_rowEven_columnEven(self):
            width = 5
            height = 10
            row = 2
            column = 4
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 0 and is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(3,2, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert b.neighbor(index, Direction.UP) == index_1d(4,1, width)
            assert b.neighbor(index, Direction.DOWN) == index_1d(4,3, width)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(3,1, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midle_rowOdd_columnOdd(self):
            width = 10
            height = 10
            row = 3
            column = 3
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 1 and is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,3, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(4,3, width)
            assert b.neighbor(index, Direction.UP) == index_1d(3,2, width)
            assert b.neighbor(index, Direction.DOWN) == index_1d(3,4, width)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(2,2, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(2,4, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(4,2, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(4,4, width)

        def test_autogenerated_midle_rowOdd_columnEven(self):
            width = 10
            height = 10
            row = 3
            column = 2
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert row % 2 == 1 and column % 2 == 0 and not is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(1,3, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(3,3, width)
            assert b.neighbor(index, Direction.UP) == index_1d(2,2, width)
            assert b.neighbor(index, Direction.DOWN) == index_1d(2,4, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midle_rowEven_columnOdd(self):
            width = 10
            height = 10
            row = 2
            column = 3
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 1 and not is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(2,2, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(4,2, width)
            assert b.neighbor(index, Direction.UP) == index_1d(3,1, width)
            assert b.neighbor(index, Direction.DOWN) == index_1d(3,3, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_midle_rowEven_columnEven(self):
            width = 10
            height = 10
            row = 2
            column = 2
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert row % 2 == 0 and column % 2 == 0 and is_octagon(index, width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(1,2, width)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(3,2, width)
            assert b.neighbor(index, Direction.UP) == index_1d(2,1, width)
            assert b.neighbor(index, Direction.DOWN) == index_1d(2,3, width)
            assert b.neighbor(index, Direction.NORTH_WEST) == index_1d(1,1, width)
            assert b.neighbor(index, Direction.SOUTH_WEST) == index_1d(1,3, width)
            assert b.neighbor(index, Direction.NORTH_EAST) == index_1d(3,1, width)
            assert b.neighbor(index, Direction.SOUTH_EAST) == index_1d(3,3, width)

        def test_autogenerated_board_1x1(self):
            width = 1
            height = 1
            row = 0
            column = 0
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_board_2x1_left(self):
            width = 2
            height = 1
            row = 0
            column = 0
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert b.neighbor(index, Direction.RIGHT) == index_1d(1,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_board_2x1_right(self):
            width = 2
            height = 1
            row = 0
            column = 1
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(0,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_board_3x1_right(self):
            width = 3
            height = 1
            row = 0
            column = 2
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert b.neighbor(index, Direction.LEFT) == index_1d(1,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_1x2_top(self):
            width = 1
            height = 2
            row = 0
            column = 0
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.UP), width, height)
            assert b.neighbor(index, Direction.DOWN) == index_1d(0,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_1x2_bottom(self):
            width = 1
            height = 2
            row = 1
            column = 0
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert b.neighbor(index, Direction.UP) == index_1d(0,0, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)

        def test_autogenerated_1x3_bottom(self):
            width = 1
            height = 3
            row = 2
            column = 0
            index = index_1d(column, row, width)
            b = OctobanBoard(width, height)

            assert not is_on_board_1d(b.neighbor(index, Direction.LEFT), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.RIGHT), width, height)
            assert b.neighbor(index, Direction.UP) == index_1d(0,1, width)
            assert not is_on_board_1d(b.neighbor(index, Direction.DOWN), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_WEST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.NORTH_EAST), width, height)
            assert not is_on_board_1d(b.neighbor(index, Direction.SOUTH_EAST), width, height)
